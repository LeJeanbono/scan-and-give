{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","videoRef","React","createRef","canvasRef","state","loading","code","videoDevices","tick","_this","analyzeVideoFrame","requestAnimationFrame","video","current","readyState","HAVE_ENOUGH_DATA","setState","canvasWidth","videoWidth","canvasHeight","videoHeight","canvas","canvasContext","getContext","height","width","drawImage","imageData","getImageData","jsQR","data","inversionAttempts","drawLineAroundQRCode","color","isLeft","location","topLeftCorner","x","topRightCorner","isRight","isUp","y","bottomLeftCorner","isDown","drawLineOnCanvas","bottomRightCorner","begin","end","beginPath","moveTo","lineTo","lineWidth","strokeStyle","stroke","onEnumerateDevices","mediaDevices","filter","mediaDevice","kind","_this2","this","navigator","enumerateDevices","then","getUserMedia","deviceId","stream","srcObject","setAttribute","play","react_default","a","createElement","ref","hidden","map","videoDevice","label","Component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89f6d85b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport jsQR from \"jsqr\";\r\n\r\nclass App extends Component {\r\n  videoRef = React.createRef();\r\n  canvasRef = React.createRef();\r\n  state = {\r\n    loading: true,\r\n    code: null,\r\n    videoDevices: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    navigator.mediaDevices.enumerateDevices().then(this.onEnumerateDevices);\r\n\r\n    //TODO ACY Select webcam : https://www.twilio.com/blog/2018/04/choosing-cameras-javascript-mediadevices-api.html\r\n\r\n    navigator.mediaDevices\r\n      // .getUserMedia({ video: { facingMode: \"environment\" } })\r\n      .getUserMedia({\r\n        video: {\r\n          deviceId:\r\n            \"23ccb9f41f9998e0fa16662561502eecfd3a8f0b50c3d5385ac2b66489f76d72\"\r\n        }\r\n      })\r\n      .then(stream => {\r\n        const video = this.videoRef.current;\r\n        video.srcObject = stream;\r\n        video.setAttribute(\"playsinline\", true); // required to tell iOS safari we don't want fullscreen\r\n        video.play();\r\n        requestAnimationFrame(this.tick);\r\n      });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (!this.state.loading) {\r\n      if (this.state.code) {\r\n        this.drawLineAroundQRCode(this.state.code);\r\n        // outputMessage.hidden = true;\r\n        // outputData.parentElement.hidden = false;\r\n        // outputData.innerText = code.data;\r\n      } else {\r\n        // outputMessage.hidden = false;\r\n        // outputData.parentElement.hidden = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  tick = () => {\r\n    this.analyzeVideoFrame();\r\n    requestAnimationFrame(this.tick);\r\n  };\r\n\r\n  analyzeVideoFrame = () => {\r\n    const video = this.videoRef.current;\r\n    if (this.state.loading && video.readyState === video.HAVE_ENOUGH_DATA) {\r\n      this.setState({\r\n        loading: false,\r\n        canvasWidth: video.videoWidth,\r\n        canvasHeight: video.videoHeight\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!this.state.loading) {\r\n      const video = this.videoRef.current;\r\n      const canvas = this.canvasRef.current;\r\n      const canvasContext = canvas.getContext(\"2d\");\r\n      canvas.height = video.videoHeight;\r\n      canvas.width = video.videoWidth;\r\n      canvasContext.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n      const imageData = canvasContext.getImageData(\r\n        0,\r\n        0,\r\n        canvas.width,\r\n        canvas.height\r\n      );\r\n      const code = jsQR(imageData.data, imageData.width, imageData.height, {\r\n        inversionAttempts: \"dontInvert\"\r\n      });\r\n      this.setState({ code });\r\n    }\r\n  };\r\n\r\n  drawLineAroundQRCode = code => {\r\n    let color = \"#FF3B58\";\r\n    const isLeft =\r\n      code.location.topLeftCorner.x < this.state.canvasWidth / 2 &&\r\n      code.location.topRightCorner.x < this.state.canvasWidth / 2;\r\n    const isRight =\r\n      code.location.topLeftCorner.x > this.state.canvasWidth / 2 &&\r\n      code.location.topRightCorner.x > this.state.canvasWidth / 2;\r\n    const isUp =\r\n      code.location.topLeftCorner.y < this.state.canvasHeight / 2 &&\r\n      code.location.bottomLeftCorner.y < this.state.canvasHeight / 2;\r\n    const isDown =\r\n      code.location.topLeftCorner.y > this.state.canvasHeight / 2 &&\r\n      code.location.bottomLeftCorner.y > this.state.canvasHeight / 2;\r\n\r\n    if (isUp && isLeft) {\r\n      color = \"#00FF00\"; // GREEN\r\n    } else if (isUp && isRight) {\r\n      color = \"#0000FF\"; // BLUE\r\n    } else if (isDown && isLeft) {\r\n      color = \"#00FFFF\"; // JAUNE\r\n    } else if (isDown && isRight) {\r\n      color = \"#FFFF00\"; // CYAN\r\n    }\r\n\r\n    this.drawLineOnCanvas(\r\n      code.location.topLeftCorner,\r\n      code.location.topRightCorner,\r\n      color\r\n    );\r\n    this.drawLineOnCanvas(\r\n      code.location.topRightCorner,\r\n      code.location.bottomRightCorner,\r\n      color\r\n    );\r\n    this.drawLineOnCanvas(\r\n      code.location.bottomRightCorner,\r\n      code.location.bottomLeftCorner,\r\n      color\r\n    );\r\n    this.drawLineOnCanvas(\r\n      code.location.bottomLeftCorner,\r\n      code.location.topLeftCorner,\r\n      color\r\n    );\r\n  };\r\n\r\n  drawLineOnCanvas = (begin, end, color) => {\r\n    const canvasContext = this.canvasRef.current.getContext(\"2d\");\r\n    canvasContext.beginPath();\r\n    canvasContext.moveTo(begin.x, begin.y);\r\n    canvasContext.lineTo(end.x, end.y);\r\n    canvasContext.lineWidth = 4;\r\n    canvasContext.strokeStyle = color;\r\n    canvasContext.stroke();\r\n  };\r\n\r\n  onEnumerateDevices = mediaDevices => {\r\n    const videoDevices = mediaDevices.filter(\r\n      mediaDevice => mediaDevice.kind === \"videoinput\"\r\n    );\r\n    this.setState({ videoDevices });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.loading && <p>Loading...</p>}\r\n        <p>{this.state.code ? this.state.code.data : \"Scan to give 1â‚¬\"}</p>\r\n        <video ref={this.videoRef} hidden />\r\n        <canvas ref={this.canvasRef} hidden={this.state.loading} />\r\n        <ul>\r\n          {this.state.videoDevices.map(videoDevice => (\r\n            <li>\r\n              {videoDevice.deviceId}-{videoDevice.label}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}